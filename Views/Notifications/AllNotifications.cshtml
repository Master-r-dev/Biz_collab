<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/notification/ikr.notificationPlugin.js" charset="windows-1251"></script>
@model PaginatedList<Biz_collab.Models.Notification>

<div class="transactions-box bg-b b-r-10 p-l-20 p-r-20p-b-20" style="width: auto">
    <h4 class="c-g">
        Мои уведомления
    </h4>
    <form asp-action="AllNotifications" method="get">
        <div class="form-actions no-color search-box" style="width: auto">
            <input type="text" class="bg-b" name="searchString" value="@ViewData["CurrentFilter"]" placeholder="Поиск..." />
            <button class="search-text-btn">
                <i class="fas fa-search"></i>
            </button>
            <a asp-action="AllNotifications">Вернуться к полному списку</a>
        </div>
    </form>
    <table class="default-table">
        <thead>
            <tr>                
                <td>
                    <a asp-action="AllNotifications"  asp-route-sortOrder="@ViewData["NotiHeaderSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Заголовок</a>
                </td>
                <td>
                    <a asp-action="AllNotifications"  asp-route-sortOrder="@ViewData["NotiBodySortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]"> Содержание</a>
                </td>
                <td>
                    <a asp-action="AllNotifications"  asp-route-sortOrder="@ViewData["IsReadSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Прочитано?</a>
                </td>
                <td>
                    <a asp-action="AllNotifications"  asp-route-sortOrder="@ViewData["CreatedDateSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Дата создания</a>
                </td>
                <td>
                    Действия
                </td>
            </tr>
        </thead>
        <tbody>
            @foreach (var n in Model)
            {
            <tr class="transaction-tr">
                <td style="max-width: 320px;overflow-wrap: break-word;word-break: break-word;white-space: normal;">
                    @n.NotiHeader
                </td>
                <td>
                    @n.NotiBody
                </td>
                @if (n.IsRead)
                {
                    <td>
                        <i class="fas fa-check-circle"></i>
                    </td>
                }
                else
                {
                    <td>
                        <i class="fas fa-clock"></i>
                    </td>

                }
                <td>
                    @n.CreatedDate.ToString("dd/MM/yy HH:mm:ss")
                </td>
                @if (n.NotiHeader.Substring(0, 2) == "Ва") //пригласили
                {

                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(@"(?<=[-])[^\s]+@[^\s]+\.[^\s]+|(?<=[:])[^\s]+");
                    var matches = regex.Matches(n.NotiBody);
                    <td>
                        <a title="Принять" href="@Url.Action("Accept", "Notifications", new { n.Id, name=matches[1].Value })">
                            <i class="fas fa-thumbs-up"></i>
                        </a>
                    </td>
                    <td>
                        <a title="Отказаться и удалить уведомление" href="@Url.Action("Delete", "Notifications", new { n.Id , action=true, login=matches[0].Value, name=matches[1].Value })">
                            <i class="fas fa-trash-alt"></i>
                        </a>
                    </td>
                    if (((IEnumerable<dynamic>)ViewBag.MutedList).Any(m => m.MutedName == matches[0].Value || m.MutedName == matches[1].Value) == false)
                    {//не заглушены
                        <td>
                            <a title="Заглушить участника" href="@Url.Action("Mute", "Notifications", new {  action = true , name=matches[0].Value})">
                                <i class="fas fa-user-slash"></i>
                            </a>
                        </td>
                        <td>
                            <a title="Заглушить группу" href="@Url.Action("Mute", "Notifications", new {  action = true ,name=matches[1].Value })">
                                <i class="fas fa-volume-mute"></i>
                            </a>
                        </td>
                    }
                    else
                    {
                        <td>
                            <a title="Включить участника" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[0].Value })">
                                <i class="fas fa-user"></i>
                            </a>
                        </td>
                        <td>
                            <a title="Включить группу" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[1].Value })">
                                <i class="fas fa-volume-up"></i>
                            </a>
                        </td>
                    }
                }
                else if (n.NotiHeader.Substring(0, 2) == "Но") //вый пользователь
                {
                    <td>
                        <a title="Войти в группу" href="@n.Url">
                            <i class="fas fa-sign-in-alt"></i>
                        </a>
                    </td>
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(@"(?<=[-])[^\s]+@[^\s]+\.[^\s]+|(?<=[:])[^\s]+");
                    var matches = regex.Matches(n.NotiBody);
                    if (((IEnumerable<dynamic>)ViewBag.MutedList).Any(m => m.MutedName == matches[0].Value || m.MutedName == matches[1].Value) == false)
                    {//не заглушены
                        <td>
                            <a title="Заглушить участника" href="@Url.Action("Mute", "Notifications", new {  action = true , name=matches[0].Value})">
                                <i class="fas fa-user-slash"></i>
                            </a>
                        </td>
                        <td>
                            <a title="Заглушить группу" href="@Url.Action("Mute", "Notifications", new {  action = true ,name=matches[1].Value })">
                                <i class="fas fa-volume-mute"></i>
                            </a>
                        </td>
                    }
                    else
                    {
                        <td>
                            <a title="Включить участника" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[0].Value })">
                                <i class="fas fa-user"></i>
                            </a>
                        </td>
                        <td>
                            <a title="Включить группу" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[1].Value })">
                                <i class="fas fa-volume-up"></i>
                            </a>
                        </td>
                    }
                    <td>
                        <a title="Удалить уведомление" href="@Url.Action("Delete", "Notifications", new { n.Id , action=false })">
                            <i class="fas fa-trash-alt"></i>
                        </a>
                    </td>
                }
                else if (n.NotiHeader.Substring(0, 2) == "У ") //Вас изменили роль
                {
                    <td>
                        <a title="Войти в группу" href="@n.Url">
                            <i class="fas fa-sign-in-alt"></i>
                        </a>
                    </td>
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(@"(?<=[-])[^\s]+@[^\s]+\.[^\s]+|(?<=[:])[^\s]+");
                    var matches = regex.Matches(n.NotiBody);
                    if (((IEnumerable<dynamic>)ViewBag.MutedList).Any(m => m.MutedName == matches[0].Value || m.MutedName == matches[1].Value) == false)
                    {//не заглушены
                        <td>
                            <a title="Заглушить участника" href="@Url.Action("Mute", "Notifications", new {  action = true , name=matches[0].Value})">
                                <i class="fas fa-user-slash"></i>
                            </a>
                        </td>
                        <td>
                            <a title="Заглушить группу" href="@Url.Action("Mute", "Notifications", new {  action = true ,name=matches[1].Value })">
                                <i class="fas fa-volume-mute"></i>
                            </a>
                        </td>
                    }
                    else
                    {
                        <td>
                            <a title="Включить участника" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[0].Value })">
                                <i class="fas fa-user"></i>
                            </a>
                        </td>
                        <td>
                            <a title="Включить группу" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[1].Value })">
                                <i class="fas fa-volume-up"></i>
                            </a>
                        </td>
                    }
                    <td>
                        <a title="Удалить уведомление" href="@Url.Action("Delete", "Notifications", new { n.Id , action=false })">
                            <i class="fas fa-trash-alt"></i>
                        </a>
                    </td>
                }
                else if (n.NotiHeader.Substring(0, 2) == "Вы") //были заблокированы
                {
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(@"(?<=[-])[^\s]+@[^\s]+\.[^\s]+|(?<=[:])[^\s]+");
                    var matches = regex.Matches(n.NotiBody);
                    if (((IEnumerable<dynamic>)ViewBag.MutedList).Any(m => m.MutedName == matches[0].Value || m.MutedName == matches[1].Value) == false)
                    {//не заглушены
                        <td>
                            <a title="Заглушить участника" href="@Url.Action("Mute", "Notifications", new {  action = true , name=matches[0].Value})">
                                <i class="fas fa-user-slash"></i>
                            </a>
                        </td>
                        <td>
                            <a title="Заглушить группу" href="@Url.Action("Mute", "Notifications", new {  action = true ,name=matches[1].Value })">
                                <i class="fas fa-volume-mute"></i>
                            </a>
                        </td>
                    }
                    else
                    {
                        <td>
                            <a title="Включить участника" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[0].Value })">
                                <i class="fas fa-user"></i>
                            </a>
                        </td>
                        <td>
                            <a title="Включить группу" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[1].Value })">
                                <i class="fas fa-volume-up"></i>
                            </a>
                        </td>
                    }
                    <td>
                        <a title="Удалить уведомление" href="@Url.Action("Delete", "Notifications", new { n.Id , action=false })">
                            <i class="fas fa-trash-alt"></i>
                        </a>
                    </td>
                }
                else if (n.NotiHeader.Substring(0, 2) == "Из") //Изменена группа
                {
                    <td>
                        <a title="Войти в группу" href="@n.Url">
                            <i class="fas fa-sign-in-alt"></i>
                        </a>
                    </td>
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(@"(?<=[-])[^\s]+@[^\s]+\.[^\s]+|(?<=[:])[^\s]+");
                    var matches = regex.Matches(n.NotiBody);
                    if (((IEnumerable<dynamic>)ViewBag.MutedList).Any(m => m.MutedName == matches[0].Value || m.MutedName == matches[1].Value) == false)
                    {//не заглушены
                        <td>
                            <a title="Заглушить участника" href="@Url.Action("Mute", "Notifications", new {  action = true , name=matches[0].Value})">
                                <i class="fas fa-user-slash"></i>
                            </a>
                        </td>
                        <td>
                            <a title="Заглушить группу" href="@Url.Action("Mute", "Notifications", new {  action = true ,name=matches[1].Value })">
                                <i class="fas fa-volume-mute"></i>
                            </a>
                        </td>
                    }
                    else
                    {
                        <td>
                            <a title="Включить участника" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[0].Value })">
                                <i class="fas fa-user"></i>
                            </a>
                        </td>
                        <td>
                            <a title="Включить группу" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[1].Value })">
                                <i class="fas fa-volume-up"></i>
                            </a>
                        </td>
                    }
                    <td>
                        <a title="Удалить уведомление" href="@Url.Action("Delete", "Notifications", new { n.Id , action=false })">
                            <i class="fas fa-trash-alt"></i>
                        </a>
                    </td>
                }
                else if (n.NotiHeader.Substring(0, 2) == "Уд") //Удалена группа
                {
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(@"(?<=[-])[^\s]+@[^\s]+\.[^\s]+");
                    var matches = regex.Matches(n.NotiBody);
                    if (((IEnumerable<dynamic>)ViewBag.MutedList).Any(m => m.MutedName == matches[0].Value) == false)
                    {//не заглушены
                        <td>
                            <a title="Заглушить участника" href="@Url.Action("Mute", "Notifications", new {  action = true,name=matches[0].Value })">
                                <i class="fas fa-user-slash"></i>
                            </a>
                        </td>

                    }
                    else
                    {
                        <td>
                            <a title="Включить участника" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[0].Value})">
                                <i class="fas fa-user"></i>
                            </a>
                        </td>
                    }
                    <td>
                        <a title="Удалить уведомление" href="@Url.Action("Delete", "Notifications", new { n.Id , action=false })">
                            <i class="fas fa-trash-alt"></i>
                        </a>
                    </td>
                }
                else if (n.NotiHeader.Substring(0, 2) == "Уп") //Упомянули Вас в чате
                {
                    <td>
                        <a title="Войти в группу" href="@n.Url">
                            <i class="fas fa-sign-in-alt"></i>
                        </a>
                    </td>
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(@"(?<=[-])[^\s]+@[^\s]+\.[^\s]+|(?<=[:])[^\s]+");
                    var matches = regex.Matches(n.NotiBody);
                    if (((IEnumerable<dynamic>)ViewBag.MutedList).Any(m => m.MutedName == matches[0].Value || m.MutedName == matches[1].Value) == false)
                    {//не заглушены
                        <td>
                            <a title="Заглушить участника" href="@Url.Action("Mute", "Notifications", new {  action = true , name=matches[0].Value})">
                                <i class="fas fa-user-slash"></i>
                            </a>
                        </td>
                        <td>
                            <a title="Заглушить группу" href="@Url.Action("Mute", "Notifications", new {  action = true ,name=matches[1].Value })">
                                <i class="fas fa-volume-mute"></i>
                            </a>
                        </td>
                    }
                    else
                    {
                        <td>
                            <a title="Включить участника" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[0].Value })">
                                <i class="fas fa-user"></i>
                            </a>
                        </td>
                        <td>
                            <a title="Включить группу" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[1].Value })">
                                <i class="fas fa-volume-up"></i>
                            </a>
                        </td>
                    }
                    <td>
                        <a title="Удалить уведомление" href="@Url.Action("Delete", "Notifications", new { n.Id , action=false })">
                            <i class="fas fa-trash-alt"></i>
                        </a>
                    </td>
                }
                else if (n.NotiHeader.Substring(0, 2) == "ПР") //Принятое приглашение
                {
                    <td>
                        <a title="Войти в группу" href="@n.Url">
                            <i class="fas fa-sign-in-alt"></i>
                        </a>
                    </td>
                    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(@"(?<=[-])[^\s]+@[^\s]+\.[^\s]+|(?<=[:])[^\s]+");
                    var matches = regex.Matches(n.NotiBody);
                    if (((IEnumerable<dynamic>)ViewBag.MutedList).Any(m => m.MutedName == matches[0].Value || m.MutedName == matches[1].Value) == false)
                    {//не заглушены
                        <td>
                            <a title="Заглушить участника" href="@Url.Action("Mute", "Notifications", new {  action = true , name=matches[0].Value})">
                                <i class="fas fa-user-slash"></i>
                            </a>
                        </td>
                        <td>
                            <a title="Заглушить группу" href="@Url.Action("Mute", "Notifications", new {  action = true ,name=matches[1].Value })">
                                <i class="fas fa-volume-mute"></i>                            
                            </a>
                        </td>
                    }
                    else
                    {
                        <td>
                            <a title="Включить участника" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[0].Value })">
                                <i class="fas fa-user"></i>
                            </a>
                        </td>
                        <td>
                            <a title="Включить группу" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[1].Value })">
                                <i class="fas fa-volume-up"></i>
                            </a>
                        </td>
                    }
                    <td>
                        <a title="Удалить уведомление" href="@Url.Action("Delete", "Notifications", new { n.Id , action=false })">
                            <i class="fas fa-trash-alt"></i>
                        </a>
                    </td>
                }                
                else if (n.NotiHeader.Substring(0, 2) == "От") //Отказано в приглашении
                {
                <td>
                    <a title="Войти в группу" href="@n.Url">
                        <i class="fas fa-sign-in-alt"></i>
                    </a>
                </td>
                System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(@"(?<=[-])[^\s]+@[^\s]+\.[^\s]+|(?<=[:])[^\s]+");
                var matches = regex.Matches(n.NotiBody);
                if (((IEnumerable
                <dynamic>
                    )ViewBag.MutedList).Any(m => m.MutedName == matches[0].Value || m.MutedName == matches[1].Value) == false)
                    {//не заглушены
                    <td>
                        <a title="Заглушить участника" href="@Url.Action("Mute", "Notifications", new {  action = true , name=matches[0].Value})">
                            <i class="fas fa-user-slash"></i>
                        </a>
                    </td>
                    <td>
                        <a title="Заглушить группу" href="@Url.Action("Mute", "Notifications", new {  action = true ,name=matches[1].Value })">
                            <i class="fas fa-volume-mute"></i>
                        </a>
                    </td>
                    }
                    else
                    {
                    <td>
                        <a title="Включить участника" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[0].Value })">
                            <i class="fas fa-user"></i>
                        </a>
                    </td>
                    <td>
                        <a title="Включить группу" href="@Url.Action("Mute", "Notifications", new {  action = false ,name=matches[1].Value })">
                            <i class="fas fa-volume-up"></i>
                        </a>
                    </td>
                    }
                    <td>
                        <a title="Удалить уведомление" href="@Url.Action("Delete", "Notifications", new { n.Id , action=false })">
                            <i class="fas fa-trash-alt"></i>
                        </a>
                    </td>
                    }
            </tr>
            }
        </tbody>
    </table>


    <div class="m-r-20" align="right">
        @{
            var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
            var nextDisabled = !Model.HasNextPage ? "disabled" : "";
        }

        <a asp-action="AllNotifications"
           asp-route-sortOrder="@ViewData["CurrentSort"]"
           asp-route-pageNumber="@(Model.PageIndex + 1)"
           asp-route-currentFilter="@ViewData["CurrentFilter"]"
           class="btn btn-default @prevDisabled"
           style="color:#adadad">
            <<
        </a>
        <a asp-action="AllNotifications"
           asp-route-sortOrder="@ViewData["CurrentSort"]"
           asp-route-pageNumber="@(Model.PageIndex + 1)"
           asp-route-currentFilter="@ViewData["CurrentFilter"]"
           class="btn btn-default @nextDisabled"
           style="color: #adadad">
            >>
        </a>
    </div>
</div>

